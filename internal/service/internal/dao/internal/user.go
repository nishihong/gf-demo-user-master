// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserDao is the data access object for table yjs_user.
type UserDao struct {
	table   string      // table is the underlying table name of the DAO.
	group   string      // group is the database configuration group name of current DAO.
	columns UserColumns // columns contains all the column names of Table for convenient usage.
}

// UserColumns defines and stores column names for table yjs_user.
type UserColumns struct {
	Id               string //
	Name             string //
	Email            string //
	Mobile           string //
	Password         string //
	UserId           string //
	RememberToken    string //
	CreatedAt        string //
	UpdatedAt        string //
	IsAdmin          string //
	UserMoney        string // 用户余额
	LoginTime        string //
	LoginIp          string // ip
	LoginInfo        string // 登录信息
	WxKey            string // 微信
	NoShowCodeTime   string // 微信扫码今日是否显示(记录时间)
	NoShowCodeStatus string // 是否显示扫码（永久不显示1）
}

//  userColumns holds the columns for table yjs_user.
var userColumns = UserColumns{
	Id:               "id",
	Name:             "name",
	Email:            "email",
	Mobile:           "mobile",
	Password:         "password",
	UserId:           "user_id",
	RememberToken:    "remember_token",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	IsAdmin:          "is_admin",
	UserMoney:        "user_money",
	LoginTime:        "login_time",
	LoginIp:          "login_ip",
	LoginInfo:        "login_info",
	WxKey:            "wx_key",
	NoShowCodeTime:   "no_show_code_time",
	NoShowCodeStatus: "no_show_code_status",
}

// NewUserDao creates and returns a new DAO object for table data access.
func NewUserDao() *UserDao {
	return &UserDao{
		group:   "default",
		table:   "yjs_user",
		columns: userColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserDao) Columns() UserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
