// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserAccountDao is the data access object for table yjs_user_account.
type UserAccountDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns UserAccountColumns // columns contains all the column names of Table for convenient usage.
}

// UserAccountColumns defines and stores column names for table yjs_user_account.
type UserAccountColumns struct {
	Id                string // 账单ID
	UserId            string // 用户ID
	UserProductId     string // 用户产品id
	ProductId         string // 产品id
	AccountStyle      string // 操作方式 1进账 2出账
	AccountType       string // 1.用户充值，2.产品购买，3.产品续费
	AccountMoney      string // 操作金额
	AccountIncometime string // 入款时间
	AccountStatus     string // 审核状态 -1待审核 1通过 2不通过 3审核中
	Content           string // 备注说明
	Oldmoney          string // 用户操作之前的余额
	Nowmoney          string // 用户操作之后的余额
	NumberType        string // 交易流水号的类型 （支付宝，微信，银行，其他等）
	Number            string // 交易流水号
	CashNumber        string // 代金券编码
	CashMoney         string // 代金券使用金额
	CreatedAt         string //
	UpdatedAt         string //
	Status            string // 入账状态 -1是未开始， 1是成功，2是失败
	Input             string // 详情
	Month             string // 续费月份
	UpgradeProductId  string // 升级产品id
	OldData           string // 旧数据
	IsAuto            string // 是否自动生成 0->否 1->是
	StrategyMoney     string // 折扣
}

//  userAccountColumns holds the columns for table yjs_user_account.
var userAccountColumns = UserAccountColumns{
	Id:                "id",
	UserId:            "user_id",
	UserProductId:     "user_product_id",
	ProductId:         "product_id",
	AccountStyle:      "account_style",
	AccountType:       "account_type",
	AccountMoney:      "account_money",
	AccountIncometime: "account_incometime",
	AccountStatus:     "account_status",
	Content:           "content",
	Oldmoney:          "oldmoney",
	Nowmoney:          "nowmoney",
	NumberType:        "number_type",
	Number:            "number",
	CashNumber:        "cash_number",
	CashMoney:         "cash_money",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	Status:            "status",
	Input:             "input",
	Month:             "month",
	UpgradeProductId:  "upgrade_product_id",
	OldData:           "old_data",
	IsAuto:            "is_auto",
	StrategyMoney:     "strategy_money",
}

// NewUserAccountDao creates and returns a new DAO object for table data access.
func NewUserAccountDao() *UserAccountDao {
	return &UserAccountDao{
		group:   "default",
		table:   "yjs_user_account",
		columns: userAccountColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserAccountDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserAccountDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserAccountDao) Columns() UserAccountColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserAccountDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserAccountDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserAccountDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
