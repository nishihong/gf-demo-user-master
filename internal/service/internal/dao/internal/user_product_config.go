// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserProductConfigDao is the data access object for table yjs_user_product_config.
type UserProductConfigDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns UserProductConfigColumns // columns contains all the column names of Table for convenient usage.
}

// UserProductConfigColumns defines and stores column names for table yjs_user_product_config.
type UserProductConfigColumns struct {
	Id            string //
	UserProductId string //
	Lport         string // Local Port Begin 即终端代理要监听本地端口范围的开始值（包含开始值
	Rmt           string // remote是个数组，源站ip
	Status        string // 1是正常2是异常
	HostName      string // 1是服务器2是云
	HostType      string // 1是服务器2是云
	HostId        string // 产品id
	CreatedAt     string //
	UpdatedAt     string //
	HostClass     string // 1是服务器2是云
	CustomIp      string // 自定义ip
	LportInterval string // 步阶
	PortLimit     string // 端口限制个数
	GetIpWay      string // 获取真实ip方式：1不需要，2通过代理，3通过连接
	Type          string // 类型 0 PC端  1 移动端
	YdCustomIp    string // 移动端，客户连接ip改为127.0.0.1
}

//  userProductConfigColumns holds the columns for table yjs_user_product_config.
var userProductConfigColumns = UserProductConfigColumns{
	Id:            "id",
	UserProductId: "user_product_id",
	Lport:         "lport",
	Rmt:           "rmt",
	Status:        "status",
	HostName:      "host_name",
	HostType:      "host_type",
	HostId:        "host_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	HostClass:     "host_class",
	CustomIp:      "custom_ip",
	LportInterval: "lport_interval",
	PortLimit:     "port_limit",
	GetIpWay:      "get_ip_way",
	Type:          "type",
	YdCustomIp:    "yd_custom_ip",
}

// NewUserProductConfigDao creates and returns a new DAO object for table data access.
func NewUserProductConfigDao() *UserProductConfigDao {
	return &UserProductConfigDao{
		group:   "default",
		table:   "yjs_user_product_config",
		columns: userProductConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserProductConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserProductConfigDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserProductConfigDao) Columns() UserProductConfigColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserProductConfigDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserProductConfigDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserProductConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
