// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserSerialDao is the data access object for table yjs_user_serial.
type UserSerialDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns UserSerialColumns // columns contains all the column names of Table for convenient usage.
}

// UserSerialColumns defines and stores column names for table yjs_user_serial.
type UserSerialColumns struct {
	Id               string // 客户类型
	Lip              string // 每一个序列号对应一个lip
	Port             string // 端口号
	UserId           string // 用户id
	Number           string // 用户序列号
	Remark           string // 序列号名称
	ProductType      string // 序列号类型 1免费 2普通 3定制
	OnOff            string // 1是启用2是关闭
	CreatedAt        string //
	UpdatedAt        string //
	Status           string // 状态 1正常 2关闭 -1 未使用
	LinkType         string // 1是源站，2是节点
	CustomStatus     string // 自定义转发ip,1正常，2关闭
	CountUpLink      string // 统计数据
	CountDownLink    string // 统计数据
	CountConnections string // 统计数据
	CountAt          string // 统计数据时间
	DeletedAt        string //
	SourceType       string // 客户类型 1云加速 2游戏盾
}

//  userSerialColumns holds the columns for table yjs_user_serial.
var userSerialColumns = UserSerialColumns{
	Id:               "id",
	Lip:              "lip",
	Port:             "port",
	UserId:           "user_id",
	Number:           "number",
	Remark:           "remark",
	ProductType:      "product_type",
	OnOff:            "on_off",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	Status:           "status",
	LinkType:         "link_type",
	CustomStatus:     "custom_status",
	CountUpLink:      "count_up_link",
	CountDownLink:    "count_down_link",
	CountConnections: "count_connections",
	CountAt:          "count_at",
	DeletedAt:        "deleted_at",
	SourceType:       "source_type",
}

// NewUserSerialDao creates and returns a new DAO object for table data access.
func NewUserSerialDao() *UserSerialDao {
	return &UserSerialDao{
		group:   "default",
		table:   "yjs_user_serial",
		columns: userSerialColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserSerialDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserSerialDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserSerialDao) Columns() UserSerialColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserSerialDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserSerialDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserSerialDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
