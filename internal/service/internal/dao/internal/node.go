// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// NodeDao is the data access object for table yjs_node.
type NodeDao struct {
	table   string      // table is the underlying table name of the DAO.
	group   string      // group is the database configuration group name of current DAO.
	columns NodeColumns // columns contains all the column names of Table for convenient usage.
}

// NodeColumns defines and stores column names for table yjs_node.
type NodeColumns struct {
	Id               string //
	HostId           string // 主机id
	Name             string // 节点名称
	Type             string // 类型 1是共享2是独立3机房
	NodeType         string // 节点类型 1防御网关。2 安全网关
	State            string // 1是正常 3是离线
	OnOff            string // -1是未启动，1是启动 2是关闭
	Port             string // 端口号
	CreatedAt        string //
	UpdatedAt        string //
	SourceType       string // 节点对应来源，1云加速节点，2游戏盾sdk节点
	UserSerialId     string // 分配的序列号id，可为空
	DistributionType string // 1手动分配，2自动分配
	RelaxId          string // 关联id
	NodeVersion      string // 节点版本
	Timer            string // 运行时间
	NsThreshold      string // 次数
	UploadTimer      string // 上报时间
	Area             string // 地区配置
	AreaSafe         string // 地区配置-用于匹配安全网关
	AreaLine         string // 专线ip-地址
	IpLine           string // 专线IP
}

//  nodeColumns holds the columns for table yjs_node.
var nodeColumns = NodeColumns{
	Id:               "id",
	HostId:           "host_id",
	Name:             "name",
	Type:             "type",
	NodeType:         "node_type",
	State:            "state",
	OnOff:            "on_off",
	Port:             "port",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	SourceType:       "source_type",
	UserSerialId:     "user_serial_id",
	DistributionType: "distribution_type",
	RelaxId:          "relax_id",
	NodeVersion:      "node_version",
	Timer:            "timer",
	NsThreshold:      "ns_threshold",
	UploadTimer:      "upload_timer",
	Area:             "area",
	AreaSafe:         "area_safe",
	AreaLine:         "area_line",
	IpLine:           "ip_line",
}

// NewNodeDao creates and returns a new DAO object for table data access.
func NewNodeDao() *NodeDao {
	return &NodeDao{
		group:   "default",
		table:   "yjs_node",
		columns: nodeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *NodeDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *NodeDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *NodeDao) Columns() NodeColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *NodeDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *NodeDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *NodeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
