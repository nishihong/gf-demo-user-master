// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SdkUserSerialDao is the data access object for table yjs_sdk_user_serial.
type SdkUserSerialDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns SdkUserSerialColumns // columns contains all the column names of Table for convenient usage.
}

// SdkUserSerialColumns defines and stores column names for table yjs_sdk_user_serial.
type SdkUserSerialColumns struct {
	Id                string // 客户类型
	UserId            string // 用户id
	Number            string // 用户序列号
	Guid              string //
	Remark            string // 序列号名称
	SdkUserProductId  string // 用户产品id
	ProductId         string // 产品id
	SdkKey            string // 秘钥
	OnOff             string // 1是启用2是关闭
	Status            string // 状态 1正常 2关闭 -1 未使用
	SourceType        string // 客户类型 1云加速 2游戏盾
	CreatedAt         string //
	UpdatedAt         string //
	DeletedAt         string //
	ClientLimit       string // 客户端最大连接数
	NodeLimit         string // 节点下发数量限制
	RunningTime       string // 运行时间
	MaxConnect        string // 一定时间内最大连接数
	ShieldTime        string // 屏蔽时间
	AllRunningTime    string // 总包-运行时间
	AllAllowPackage   string // 总包-允许的总包数量
	AllShieldTime     string // 总包-屏蔽时间
	BigRunningTime    string // 大包-运行时间
	BigAllowPackage   string // 大包-允许的大包数量
	BigShieldTime     string // 大包-屏蔽时间
	PackageStatus     string // 包-开关
	ClientLimitStatus string // 客户端最大连接数开关
	SdkLimitStatus    string // SDK连接数开关
}

//  sdkUserSerialColumns holds the columns for table yjs_sdk_user_serial.
var sdkUserSerialColumns = SdkUserSerialColumns{
	Id:                "id",
	UserId:            "user_id",
	Number:            "number",
	Guid:              "guid",
	Remark:            "remark",
	SdkUserProductId:  "sdk_user_product_id",
	ProductId:         "product_id",
	SdkKey:            "sdk_key",
	OnOff:             "on_off",
	Status:            "status",
	SourceType:        "source_type",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
	ClientLimit:       "client_limit",
	NodeLimit:         "node_limit",
	RunningTime:       "running_time",
	MaxConnect:        "max_connect",
	ShieldTime:        "shield_time",
	AllRunningTime:    "all_running_time",
	AllAllowPackage:   "all_allow_package",
	AllShieldTime:     "all_shield_time",
	BigRunningTime:    "big_running_time",
	BigAllowPackage:   "big_allow_package",
	BigShieldTime:     "big_shield_time",
	PackageStatus:     "package_status",
	ClientLimitStatus: "client_limit_status",
	SdkLimitStatus:    "sdk_limit_status",
}

// NewSdkUserSerialDao creates and returns a new DAO object for table data access.
func NewSdkUserSerialDao() *SdkUserSerialDao {
	return &SdkUserSerialDao{
		group:   "default",
		table:   "yjs_sdk_user_serial",
		columns: sdkUserSerialColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SdkUserSerialDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SdkUserSerialDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *SdkUserSerialDao) Columns() SdkUserSerialColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *SdkUserSerialDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SdkUserSerialDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SdkUserSerialDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
