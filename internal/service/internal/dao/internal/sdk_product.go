// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SdkProductDao is the data access object for table yjs_sdk_product.
type SdkProductDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns SdkProductColumns // columns contains all the column names of Table for convenient usage.
}

// SdkProductColumns defines and stores column names for table yjs_sdk_product.
type SdkProductColumns struct {
	Id                  string //
	Name                string // 产品名称
	Amount              string // 产品金额（月付）
	QuarterlyAmount     string // 季付金额
	SemiAnnualAmount    string // 半年付金额
	AnnualAmount        string // 年付金额
	SharedNodesNum      string // 共享节点数
	IndependentNodesNum string // 独立节点数
	ForwardingRulesNum  string // 转发规则数
	Ddos                string // DDoS防御
	Cc                  string // CC攻击防御
	SourceServersNum    string // 源服务器数
	ConnectionNumber    string // 连接数
	Bandwidth           string // 业务带宽
	DailyActivate       string // 日活终端
	Sort                string // 排序
	Status              string // 是否启用 1启用2不启用
	Remark              string // 备注
	CreatedAt           string //
	UpdatedAt           string //
	DeletedAt           string //
	GameNum             string // 游戏授权数
}

//  sdkProductColumns holds the columns for table yjs_sdk_product.
var sdkProductColumns = SdkProductColumns{
	Id:                  "id",
	Name:                "name",
	Amount:              "amount",
	QuarterlyAmount:     "quarterly_amount",
	SemiAnnualAmount:    "semi_annual_amount",
	AnnualAmount:        "annual_amount",
	SharedNodesNum:      "shared_nodes_num",
	IndependentNodesNum: "independent_nodes_num",
	ForwardingRulesNum:  "forwarding_rules_num",
	Ddos:                "ddos",
	Cc:                  "cc",
	SourceServersNum:    "source_servers_num",
	ConnectionNumber:    "connection_number",
	Bandwidth:           "bandwidth",
	DailyActivate:       "daily_activate",
	Sort:                "sort",
	Status:              "status",
	Remark:              "remark",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
	GameNum:             "game_num",
}

// NewSdkProductDao creates and returns a new DAO object for table data access.
func NewSdkProductDao() *SdkProductDao {
	return &SdkProductDao{
		group:   "default",
		table:   "yjs_sdk_product",
		columns: sdkProductColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SdkProductDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SdkProductDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *SdkProductDao) Columns() SdkProductColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *SdkProductDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SdkProductDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SdkProductDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
