// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ProductDao is the data access object for table yjs_product.
type ProductDao struct {
	table   string         // table is the underlying table name of the DAO.
	group   string         // group is the database configuration group name of current DAO.
	columns ProductColumns // columns contains all the column names of Table for convenient usage.
}

// ProductColumns defines and stores column names for table yjs_product.
type ProductColumns struct {
	Id                  string //
	Name                string // 产品名称
	ProductType         string // 产品类型 1免费，2是普通，3是定制
	Money               string // 产品金额
	Month               string // 产品有效期
	Remark              string // 产品备注
	Status              string // 产品状态 1开启 0关闭
	Sort                string // 排序
	AvailablePoints     string // 可用点数
	AvaliableFrequency  string // 可用封装次数
	CreatedAt           string //
	UpdatedAt           string //
	SharedNodesNum      string // 共享节点数
	IndependentNodesNum string // 独立节点数
	IsSdk               string // 是否开启sdk功能，1开启，0关闭
}

//  productColumns holds the columns for table yjs_product.
var productColumns = ProductColumns{
	Id:                  "id",
	Name:                "name",
	ProductType:         "product_type",
	Money:               "money",
	Month:               "month",
	Remark:              "remark",
	Status:              "status",
	Sort:                "sort",
	AvailablePoints:     "available_points",
	AvaliableFrequency:  "avaliable_frequency",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	SharedNodesNum:      "shared_nodes_num",
	IndependentNodesNum: "independent_nodes_num",
	IsSdk:               "is_sdk",
}

// NewProductDao creates and returns a new DAO object for table data access.
func NewProductDao() *ProductDao {
	return &ProductDao{
		group:   "default",
		table:   "yjs_product",
		columns: productColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ProductDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ProductDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ProductDao) Columns() ProductColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ProductDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ProductDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ProductDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
