// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SdkUserProductDao is the data access object for table yjs_sdk_user_product.
type SdkUserProductDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns SdkUserProductColumns // columns contains all the column names of Table for convenient usage.
}

// SdkUserProductColumns defines and stores column names for table yjs_sdk_user_product.
type SdkUserProductColumns struct {
	Id          string //
	UserId      string // 用户id
	DeviceId    string // 实例id
	Lip         string // 客户连接ip
	ProductId   string // 产品id
	OnOff       string // -1是未初始化，1是启用，2是关闭
	Status      string // 用户产品状态1正常 2关闭 -1未支付
	Name        string // 产品名称
	StartAt     string // 生效日期
	EndAt       string // 失效日期
	Bz          string // 备注
	ClientLimit string // 客户端最大连接数
	Username    string // sdk字段-所属用户
	Amount      string // sdk字段-金额
	TradedMode  string // sdk字段-交易方式
	TradedType  string // sdk字段-交易类型
	OrderType   string // sdk字段-订单类型
	Operator    string // SDK字段-操作员
	SourceType  string // 客户来源 1云加速 2sdk
	Remarks     string // 数据中心-列表备注
	RealAmount  string // 数据中心-实际支付价格
	SellId      string // 销售id
	NodeLimit   string // 节点下发数量限制
	DayRemark   string // 日常备注（数据中心使用）
	CreatedAt   string //
	UpdatedAt   string //
	DeletedAt   string //
}

//  sdkUserProductColumns holds the columns for table yjs_sdk_user_product.
var sdkUserProductColumns = SdkUserProductColumns{
	Id:          "id",
	UserId:      "user_id",
	DeviceId:    "device_id",
	Lip:         "lip",
	ProductId:   "product_id",
	OnOff:       "on_off",
	Status:      "status",
	Name:        "name",
	StartAt:     "start_at",
	EndAt:       "end_at",
	Bz:          "bz",
	ClientLimit: "client_limit",
	Username:    "username",
	Amount:      "amount",
	TradedMode:  "traded_mode",
	TradedType:  "traded_type",
	OrderType:   "order_type",
	Operator:    "operator",
	SourceType:  "source_type",
	Remarks:     "remarks",
	RealAmount:  "real_amount",
	SellId:      "sell_id",
	NodeLimit:   "node_limit",
	DayRemark:   "day_remark",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

// NewSdkUserProductDao creates and returns a new DAO object for table data access.
func NewSdkUserProductDao() *SdkUserProductDao {
	return &SdkUserProductDao{
		group:   "default",
		table:   "yjs_sdk_user_product",
		columns: sdkUserProductColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SdkUserProductDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SdkUserProductDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *SdkUserProductDao) Columns() SdkUserProductColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *SdkUserProductDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SdkUserProductDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SdkUserProductDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
