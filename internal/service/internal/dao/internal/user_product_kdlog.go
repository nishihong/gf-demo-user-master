// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-06-06 15:21:14
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserProductKdlogDao is the data access object for table yjs_user_product_kdlog.
type UserProductKdlogDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns UserProductKdlogColumns // columns contains all the column names of Table for convenient usage.
}

// UserProductKdlogColumns defines and stores column names for table yjs_user_product_kdlog.
type UserProductKdlogColumns struct {
	Id               string //
	UserId           string //
	UserProductId    string // 产品id
	Type             string // 1,是运行扣点，2是封装扣点
	UserSerialNumber string // 用户key值
	OldData          string // 老数据
	NewData          string // 新数据
	Mac              string //
	Ip               string //
	UpdatedAt        string //
	CreatedAt        string //
}

//  userProductKdlogColumns holds the columns for table yjs_user_product_kdlog.
var userProductKdlogColumns = UserProductKdlogColumns{
	Id:               "id",
	UserId:           "user_id",
	UserProductId:    "user_product_id",
	Type:             "type",
	UserSerialNumber: "user_serial_number",
	OldData:          "old_data",
	NewData:          "new_data",
	Mac:              "mac",
	Ip:               "ip",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
}

// NewUserProductKdlogDao creates and returns a new DAO object for table data access.
func NewUserProductKdlogDao() *UserProductKdlogDao {
	return &UserProductKdlogDao{
		group:   "default",
		table:   "yjs_user_product_kdlog",
		columns: userProductKdlogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserProductKdlogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserProductKdlogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserProductKdlogDao) Columns() UserProductKdlogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserProductKdlogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserProductKdlogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserProductKdlogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
